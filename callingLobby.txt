
import { SocketIoContext } from "@/app/Context/SocketIoProvider"
import { useCallback, useContext, useEffect, useRef, useState } from "react"
import { useRouter } from "next/navigation"
import Swal from "sweetalert2"

function CallingLobby({ sdp, selectedConversation, setmakeCall }) {
  const { socket, socketSession } = useContext(SocketIoContext)
  const [user, setUser] = useState(null)
  const [myId,setMyId]=useState('')
  const router = useRouter()
  // const [peerConnection, setPeerConnection] = useState(null)
  const [localStream, setLocalStream] = useState(null)
  const [remoteStream, setRemoteStream] = useState(null)
  const localStreamRef = useRef()
  const remoteStreamRef = useRef()
  const servers = {
    iceServers: [
      {
        urls: [
          'stun:stun1.l.google.com:19302',
          'stun:stun2.l.google.com:19302',
        ],
      },
    ],
  };
  const peerConnection = new RTCPeerConnection(servers)

  // useEffect(() => {
  //   const user=socketSession.user
  //   if(user){
  //     const myId=user.myId
  //     setMyId(myId)
  //   }
    
  //   const pc = new RTCPeerConnection(servers)
  //   if (pc && myId) {
  //       setPeerConnection(pc)
  //   }
  // }, [myId])


// handle incoming call from other side peer
  const handleIncomingCall = async (SDP) => {
     handleWebcam()
    const answer = await getAnswer(SDP.offer)
    if (answer) {
      socket.emit('call-accepted', { callFrom: SDP.callFrom, callTo: SDP.callTo, answer })
    }
    else {
      console.log('cant get answer');
      socket.emit('call-response-error', { errorMessage: 'Unable to create Call Try Again Later' })
    }
  }
  
// handle acceptance of call from this side of peer
  const handleCallAccepted =async ({ callFrom, callTo, answer }) => {
// other person had send us this answer as acceptance of call , we need to set this answer to our sides peerConnections remoteDescription  (because this answer is generated by another peer and our offer is already there in our local description)
if(peerConnection &&  answer){
  setRemoteDescriptionAnswer(answer)

 console.log('call accepted');
}
if(peerConnection.remoteDescription){
console.log('this is nto kldsjflk');
}
localStream.getTracks().forEach((track) => {
  peerConnection.addTrack(track, localStream);
});

peerConnection.ontrack = (event) => {
  const rs=event.streams
  remoteStreamRef.current.srcObject=rs
  setRemoteStream(rs)
}

}



const setRemoteDescriptionAnswer=(answer)=>{
  peerConnection.setRemoteDescription(new RTCSessionDescription(answer))
}


  const handleWebcam = () => {
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true,
    }).then((stream) => {
      setLocalStream(stream)
      localStreamRef.current.srcObject = stream
    })
  }

  const handleCancelCall=useCallback(()=>{
    (data) => {
      Swal.fire({
        title: 'Cancelled',
        text: data.errorMessage,
        showConfirmButton: true,
        confirmButtonColor: 'green',
        confirmButtonText: 'Call Again',
        showCancelButton: true,
        cancelButtonColor: 'red',
        cancelButtonText: ' Back'
      }).then((result) => {
        if (result.isConfirmed) {
          // call again
          handleOutgoingCall()
        }
        if (result.dismiss == Swal.DismissReason.cancel) {
          // call cancel
          setmakeCall(false)
        }
      })
  
    }
  },[])



  socket.on('call-accepted', handleCallAccepted)
  socket.on('call-cancel',handleCancelCall)


  useEffect(() => {
    if (sdp && peerConnection) {
      handleIncomingCall(sdp)
    }
  }, [sdp, peerConnection])


  // get offer for outgoing call
  const getOffer = async () => {
    const offer = await peerConnection.createOffer()
    await peerConnection.setLocalDescription(new RTCSessionDescription(offer))
    return offer
  }

  // get answer for incoming offer
  const getAnswer = async (offer) => {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const ans = await peerConnection.createAnswer()
    await peerConnection.setLocalDescription(new RTCSessionDescription(ans))
    console.log('this is peerConnection of recievers side',peerConnection);
    return ans
  }



  const handleOutgoingCall = async () => {
    
    // getting user media access
     handleWebcam()

    const offer = await getOffer()
    const myData = {
      name: socketSession.user.name,
      id: socketSession.user.myId,
      image: socketSession.user.image
    }
    if(myData){
      setUser(myData)
    }
    socket?.emit('call-user', { offer, callTo: selectedConversation.user, callFrom: myData })
  };





  return (
    <div className="fixed  flex flex-col inset-0  bg-white">
      <nav className="py-4 flex w-full justify-center items-center ">
        <h1>call to {user?.name}</h1>
      </nav>
      <main className="flex gap-10  px-[5rem]  ">
        <video className="flex-1 border border-black rounded-md h-[20rem] w-[20rem] " ref={localStreamRef} autoPlay></video>
        <video className="flex-1 border border-black rounded-md  h-[20rem] w-[20rem] " ref={remoteStreamRef} autoPlay></video>

      </main>
      <div className="flex w-full  py-7 justify-center items-center ">
        <div className="flex gap-6 ">
          <button className="bg-black py-3 text-white px-6" onClick={handleOutgoingCall}>call</button>
          <button className="bg-black py-3 text-white px-6">mute</button>
          <button className="bg-black py-3 text-white px-6">cameraOff</button>
          <button className="bg-black py-3 text-white px-6">Hangup</button>
        </div>
      </div>
    </div>

  )
}

export default CallingLobby